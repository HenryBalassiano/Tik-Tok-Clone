{"version":3,"sources":["Video.js","App.js","reportWebVitals.js","index.js"],"names":["Video","source","title","author","useState","play","setPlay","click","setClicked","count","setCount","videoRef","useRef","audioRef","playRef","id","ref","src","alt","IconButton","onClick","style","fontSize","current","pause","display","type","slice","Swiper","use","Navigation","App","loading","setload","video","data","setData","console","log","map","item","reddit_video","fallback_url","useEffect","loop","spaceBetween","direction","slidesPerView","preloadImages","observer","observeParents","watchSlidesVisibility","watchSlidesProgress","a","fetch","response","json","array","mediaData","children","i","length","media","push","err","fetchData","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad422d2e.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useRef,useState } from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n                  function Video ({source,title,author}){\r\n                        const [play, setPlay] = useState(false)\r\n                        const [click, setClicked] = useState(false)\r\n                        const [count, setCount] = useState()\r\n\r\n                        const videoRef= useRef(null)\r\n                        const audioRef= useRef(null)\r\n                        const playRef= useRef('')\r\n                        \r\n                        const clickFunc = () =>{\r\n                              if(click === false){\r\n                                    setClicked(true)\r\n                                    setCount(1)\r\n                              }\r\n                              else{\r\n                                    setClicked(false)\r\n                                    setCount('')\r\n\r\n                              }\r\n                        }\r\n\r\n                        const videoPress =()=>{     \r\n                              \r\n                              if(play ){\r\n                              videoRef.current.pause()\r\n                              audioRef.current.pause()\r\n\r\n                              setPlay(false)               \r\n                              playRef.current.style.display='block'     \r\n                              \r\n\r\n                           \r\n                              \r\n                              }else{\r\n                                    videoRef.current.play()\r\n                                    audioRef.current.play()\r\n\r\n                                    setPlay(true)       \r\n                                    playRef.current.style.display='none'     \r\n\r\n\r\n                              }\r\n                        \r\n                  }\r\n                        return(\r\n                        <div id='video-container'>        \r\n                        <img ref={playRef} id='play-btn' src= './play.png'  alt='play'/>\r\n                        <h1  id='logo'> F</h1>\r\n                        <div id='author-title'>\r\n                        <p id='title' >{title}...</p>\r\n                        <p id='author'>@{author}</p>\r\n                        \r\n                        </div>\r\n                        <div id='ld'>\r\n                        <IconButton id='icons' onClick={clickFunc}>\r\n      {click ? <FavoriteIcon style={{ fontSize: '40px' }} />  :<FavoriteBorderIcon style={{ fontSize: '40px' }}/> }\r\n    </IconButton>\r\n                        <span id='like-count'>{count}</span>\r\n</div>\r\n\r\n                  <video  ref={videoRef} \r\n\r\n                  onClick={videoPress}\r\n                        src={source}\r\n                        type=\"video/mp4\"\r\n                        ></video>\r\n                        <audio ref={audioRef}  >      \r\n                        <source  src={ source&& source.slice(0,37)+'audio.mp4' }>\r\n                              </source>\r\n                              </audio>\r\n                        </div>     \r\n                        )\r\n\r\n\r\n                  }\r\n                  export default Video\r\n","import { useEffect, useState } from 'react';\nimport './App.css';\nimport Video from './Video'\nimport Swiper, { Navigation,  } from 'swiper';\nimport 'swiper/swiper-bundle.css';\nimport { TrendingUp } from '@material-ui/icons';\nSwiper.use([Navigation, ]);\n\n  function App() {\n\n    const [loading,setload]=useState(null)\n    const [data,setData]=useState(\n\n      {\n\n        video:[],\n        author:'',\n        title:'',\n      }\n    )\n    console.log(data.video.map(item=>console.log(item.reddit_video.fallback_url)))\n\n\n\n    useEffect(()=>{\n\n      const mySwiper = new Swiper('.swiper-container', {\n        loop: true,    \n        spaceBetween: 830,\n        direction: 'vertical',\n        slidesPerView:1,\n        preloadImages: true,\n        observer: true,\n        observeParents: true,\n        watchSlidesVisibility: true,\n        watchSlidesProgress: true,\n      })  \n    \n      \n    \n    },[])\n\n\n\n            useEffect(()=>{\n\n              async function fetchData(){        \n\n              const response= await fetch('https://www.reddit.com/r/unexpected/.json')\n\n                const data= await response.json()     \n                    let array = []    \n                    let mediaData= data.data.children\n                 \n                \n        try{\n          \n          for(var i =0; i< mediaData.length;i++){      \n                  if(mediaData[i].data.media !== null)\n                  array.push(mediaData[i].data.media)       \n                }    \n                 setData({\n                      video:array\n                    })\n\n                     setload(true)\n\n\n              }\n              \n            catch (err) {\n              console.log(err);\n            }\n          }\n\n\n              fetchData()\n           \n            },[])\n            \n            \n\n      return (\n      \n      <div className=\"App\">\n        \n        <div id ='video-scroll'>\n        <div className=\"swiper-container\" >\n  <div className=\"swiper-wrapper\">\n       {data.video.map(item=>{\n                 return(     <div className=\"swiper-slide\" >\n\n       {loading ?  <Video  source={item.reddit_video.fallback_url}  />:<div id='loading'>LOADING..  </div> } </div>\n             )\n            })}   \n\n             </div>\n\n             </div>\n\n        </div>\n\n  </div>\n  );\n  }\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}