{"version":3,"sources":["Video.js","App.js","reportWebVitals.js","index.js"],"names":["Video","source","title","author","useState","play","setPlay","click","setClicked","count","setCount","videoRef","useRef","audioRef","playRef","id","ref","src","alt","IconButton","onClick","console","log","style","fontSize","current","pause","display","type","slice","Swiper","use","Navigation","App","loading","setload","video","data","setData","useEffect","loop","spaceBetween","direction","slidesPerView","speed","preloadImages","observer","observeParents","watchSlidesVisibility","watchSlidesProgress","a","fetch","response","json","mediaData","children","i","length","media","push","err","fetchData","className","map","v","index","reddit_video","fallback_url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0beb31a.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useRef,useState } from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n                  function Video ({source,title,author}){\r\n                        const [play, setPlay] = useState(false)\r\n                        const [click, setClicked] = useState(false)\r\n                        const [count, setCount] = useState()\r\n                        const videoRef= useRef(null)\r\n                        const audioRef= useRef(null)\r\n                        const playRef= useRef('')\r\n\r\n                        const clickFunc = () =>{\r\n                              if(click === false){\r\n                                    setClicked(true)\r\n                                    setCount(1)\r\n                              }\r\n                              else{\r\n                                    setClicked(false)\r\n                                    setCount('')\r\n                                    console.log(click)\r\n\r\n                              }\r\n                        }\r\n\r\n                        const videoPress =()=>{     \r\n                              \r\n                              if(play ){\r\n                              videoRef.current.pause()\r\n                              audioRef.current.pause()\r\n\r\n                              setPlay(false)               \r\n                              playRef.current.style.display='block'     \r\n                              \r\n                        }else{\r\n                                    videoRef.current.play()\r\n                                    audioRef.current.play()\r\n\r\n                                    setPlay(true)       \r\n                                    playRef.current.style.display='none'     \r\n\r\n\r\n                              }\r\n                  }\r\n                        return(\r\n                              \r\n                        <div id='video-container'>        \r\n                        <img ref={playRef} id='play-btn' src= './play.png'  alt='play'/>\r\n                        <h1  id='logo'> F</h1>\r\n                        \r\n                        \r\n                        <div id='ld'>\r\n                        <IconButton id='icons' onClick={clickFunc}>\r\n      {click ? <FavoriteIcon style={{ fontSize: '40px' }} />  :<FavoriteBorderIcon style={{ fontSize: '40px' }}/> }\r\n    </IconButton>\r\n                        <span id='like-count'>{count}</span>\r\n</div>\r\n\r\n                  <video  ref={videoRef} \r\n\r\n                  onClick={videoPress}\r\n                        src={source}\r\n                        type=\"video/mp4\"\r\n                        ></video>\r\n                        <audio ref={audioRef}  >      \r\n                        <source  src={ source&& source.slice(0,37)+'audio.mp4' }>\r\n                              </source>\r\n                              </audio>\r\n                        </div>     \r\n                        )\r\n\r\n\r\n                  }\r\n                  export default Video\r\n","      import { useEffect, useState } from 'react';\n      import './App.css';\n      import Video from './Video'\n      import Swiper, { Navigation,  } from 'swiper';\n      import 'swiper/swiper-bundle.css';\n      Swiper.use([Navigation, ]);\n\n        function App() {\n\n          const [loading,setload]=useState(null)\n          const [data,setData]=useState(\n          [\n            {\n\n              video:[],\n              author:[],\n              title:[]\n            }]\n          )\n\n\n          useEffect(()=>{\n\n            const mySwiper = new Swiper('.swiper-container', {\n              loop: true,    \n              spaceBetween: 830,\n              direction: 'vertical',\n              slidesPerView:1,\n              speed:100,\n              preloadImages: true,\n              observer: true,\n              observeParents: true,\n              watchSlidesVisibility: true,\n              watchSlidesProgress: true,\n              \n            })  \n          \n      \n       \n          },[])\n\n\n\n                  useEffect(()=>{\n\n                    async function fetchData(){        \n\n                    const response= await fetch('https://www.reddit.com/r/unexpected/.json')\n\n                      const data= await response.json()     \n                          const video = [] \n                          const author=[] \n                          const title=[]     \n                          const mediaData= data.data.children\n                      \n              try{\n                \n                for(var i =4; i< mediaData.length;i++){      \n                        if(mediaData[i].data.media !== null )\n                        video.push(mediaData[i].data.media)   \n                        author.push(mediaData[i].data.author)       \n                        title.push(mediaData[i].data.title)       \n\n                      }    \n                      setData(\n                        [{\n                            video:video,\n                            author:author,\n                            title:title,\n\n\n                          }])\n                      setload(true)\n                    }\n                    \n                  catch (err) {\n                    console.log(err);\n                  }\n                }\n                  fetchData()\n          \n                  },[])\n\n            return (\n            \n            <div className=\"App\">          \n               <div id ='video-scroll'>\n             {data.map(({video,author,title})=>{\n\n                      return(  \n                        <div className=\"swiper-container\" >\n                         <div className=\"swiper-wrapper\">   \n                         {video.map(((v, index) => \n                         <div className=\"swiper-slide\" > \n                       {loading ?  <Video  className='lazy' source={v.reddit_video.fallback_url} /> : <p>Loading...</p>}\n                         <p id='author'>@{author[index]}</p>\n                         <p  id='title'>{title[index]}...</p>\n          \n                       </div>))}\n\n                  </div>  \n                   </div>\n\n                  )\n                  })} \n              </div> \n\n        </div>\n        );\n        }\n\n    \n\n      export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}