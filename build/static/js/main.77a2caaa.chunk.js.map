{"version":3,"sources":["Video.js","App.js","reportWebVitals.js","index.js"],"names":["Video","source","useState","click","setClicked","count","setCount","videoRef","useRef","audioRef","playRef","ref","onScreen","rootMargin","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","current","observe","unobserve","useOnScreen","play","pause","id","src","alt","IconButton","onClick","console","log","style","fontSize","type","slice","Swiper","use","Navigation","App","loading","setload","video","author","title","data","setData","loop","spaceBetween","direction","slidesPerView","speed","preloadImages","observeParents","watchSlidesVisibility","watchSlidesProgress","a","fetch","response","json","mediaData","children","i","length","media","push","err","fetchData","className","map","v","index","reddit_video","fallback_url","substring","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77a2caaa.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useRef,useState,useEffect} from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n\r\n\r\n\r\n                        function useOnScreen(ref, rootMargin = '0px') {\r\n                              const [isIntersecting, setIntersecting] = useState(false);\r\n                        \r\n                              useEffect(() => {\r\n                              const observer = new IntersectionObserver(\r\n                              ([entry]) => {\r\n                                    setIntersecting(entry.isIntersecting);\r\n                              },\r\n                              {\r\n                                    rootMargin\r\n                              }\r\n                              );\r\n                              if (ref.current) {\r\n                              observer.observe(ref.current);\r\n                              }\r\n                              return () => {\r\n                              observer.unobserve(ref.current);\r\n                              };\r\n                              }, []); \r\n    \r\n                              return isIntersecting;\r\n                        }\r\n\r\n\r\n                  function Video ({source}){\r\n                        const [play, setPlay] = useState(false)\r\n                        const [click, setClicked] = useState(false)\r\n                        const [count, setCount] = useState()\r\n                        const videoRef= useRef(null)\r\n                        const audioRef= useRef(null)\r\n                        const playRef= useRef('')\r\n                        const ref = useRef();\r\n                        const onScreen = useOnScreen(ref, '100px');\r\n\r\n\r\n                        const clickFunc = () =>{\r\n                              if(click === false){\r\n                                    setClicked(true)\r\n                                    setCount(1)\r\n                              }\r\n                              else{\r\n                                    setClicked(false)\r\n                                    setCount('')\r\n                                    console.log(click)\r\n\r\n                              }\r\n                        }\r\n                        useEffect(()=>{\r\n                              if(onScreen === true){\r\n                                    videoRef.current.play()\r\n                                    audioRef.current.play()\r\n                                    \r\n                              }\r\n                              else{\r\n                                    videoRef.current.pause()\r\n                                    audioRef.current.pause()   \r\n\r\n\r\n                              }\r\n                        })\r\n                        const videoPlay = ()=>{\r\n                          videoRef.current.play()\r\n                          audioRef.current.play()\r\n\r\n                        }\r\n                        return(\r\n                              \r\n                        <div id='video-container'  ref={ref}>        \r\n                        <img ref={playRef} id='play-btn' src= './play.png'  alt='play'/>\r\n                        <h1  id='logo'> F</h1>\r\n                        \r\n                        \r\n                        <div id='ld'>\r\n                        <IconButton id='icons' onClick={clickFunc}>\r\n      {click ? <FavoriteIcon style={{ fontSize: '40px' }} />  :<FavoriteBorderIcon style={{ fontSize: '40px' }}/> }\r\n    </IconButton>\r\n                        <span id='like-count'>{count}</span>\r\n</div>\r\n\r\n                  <video  ref={videoRef} \r\n                  onClick={videoPlay}\r\n                        src={source}\r\n                        type=\"video/mp4\"\r\n                        ></video>\r\n                        <audio ref={audioRef}  >      \r\n                        <source  src={ source&& source.slice(0,37)+'audio.mp4' }>\r\n                              </source>\r\n                              </audio>\r\n                        </div>     \r\n                        )\r\n\r\n\r\n                  }\r\n                  export default Video\r\n","      import { useEffect, useState } from 'react';\n      import './App.css';\n      import Video from './Video'\n      import Swiper, { Navigation,  } from 'swiper';\n      import 'swiper/swiper-bundle.css';\n      Swiper.use([Navigation, ]);\n\n        function App() {\n\n          const [loading,setload]=useState(null)\n          const [data,setData]=useState(\n          [\n            {\n\n              video:[],\n              author:[],\n              title:[]\n            }]\n          )\n\n\n          \n          useEffect(()=>{\n\n            const mySwiper = new Swiper('.swiper-container', {\n              loop: true,    \n              spaceBetween: 830,\n              direction: 'vertical',\n              slidesPerView:1,\n              speed:100,\n              preloadImages: true,\n              observer: true,\n              observeParents: true,\n              watchSlidesVisibility: true,\n              watchSlidesProgress: true,\n              \n            })  \n          \n      \n       \n          },[])\n\n\n\n                  useEffect(()=>{\n\n                    async function fetchData(){        \n\n                    const response= await fetch('https://www.reddit.com/r/tiktokcringe/.json')\n\n                      const data= await response.json()     \n                          const video = [] \n                          const author=[] \n                          const title=[]     \n                          const mediaData= data.data.children\n\n              try{\n                \n                for(var i =5; i< mediaData.length;i++){      \n                        if(mediaData[i].data.media !== null )\n                        video.push(mediaData[i].data.media)   \n                        author.push(mediaData[i].data.author)       \n                        title.push(mediaData[i].data.title)       \n\n                      }    \n                      setData(\n                        [{\n                            video:video,\n                            author:author,\n                            title:title,\n\n\n                          }])          \n                      setload(true)\n\n                    }\n                    \n                  catch (err) {\n                    console.log(err);\n                  }\n                }\n                  fetchData()\n          \n                  },[])\n\n            return (\n            \n            <div className=\"App\">          \n               <div id ='video-scroll'>\n             {data.map(({video,author,title})=>{\n\n                      return(  \n                        <div className=\"swiper-container\" >\n                         <div className=\"swiper-wrapper\">   \n                         {video.map(((v, index) => \n                         <div className=\"swiper-slide\" > \n                       {loading ?  <Video  className='lazy' source={v.reddit_video.fallback_url} /> : <p>Loading...</p>}\n                         <p id='author'>@{author[index]}</p>\n                         <p  id='title'>{ title[index].length < 30 ?title[index ]:title[index].substring(0,30)+'...' } </p>\n          \n                       </div>))}\n\n                  </div>  \n                   </div>\n\n                  )\n                  })} \n              </div> \n\n        </div>\n        );\n        }\n\n    \n\n      export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}